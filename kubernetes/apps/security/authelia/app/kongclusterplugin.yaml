---
apiVersion: configuration.konghq.com/v1
kind: KongClusterPlugin
metadata:
  name: authelia-forward
  annotations:
    kubernetes.io/ingress.class: kong
plugin: pre-function
config:
  access:
    - |
      local httpc = require ("resty.http").new()

      local authelia_url = "http://authelia.security.svc.cluster.local:8080/api/verify"

      local function forward_to_authelia()

          local res, err = httpc:request_uri(authelia_url, {
              method = "GET",
              headers = {
                  ["Accept"]              = kong.request.get_header("Accept"),
                  ["Cookie"]              = kong.request.get_header("Cookie"),
                  ["Proxy-Authorization"] = kong.request.get_header("Proxy-Authorization"),

                  ["X-Authelia-URL"]     = "https://auth.janpuc.com/",
                  ["X-Forwarded-Method"] = kong.request.get_method(),
                  ["X-Forwarded-Proto"]  = kong.request.get_forwarded_scheme(),
                  ["X-Forwarded-Host"]   = kong.request.get_host(),
                  ["X-Forwarded-URI"]    = kong.request.get_path(),
                  ["X-Forwarded-For"]    = kong.request.get_header("X-Forwarded-For"),
              },
          })

          if not res then
              kong.log.err("Failed to request Authelia: ", err)
              return kong.response.error(500, err)
          end

          if res.status == 302 then
              kong.response.set_headers(res.headers)
              return kong.response.exit(302, "Found")
          elseif res.status ~= 200 then
              kong.log.err("Authelia authentication failed with status: " .. res.status, err)
              if res.headers["Set-Cookie"] then
                  kong.response.add_header("Set-Cookie", res.headers["Set-Cookie"])
              end
              return kong.response.error(401, "Unauthrized")
          end

          if res.headers["Set-Cookie"] then
              kong.response.add_header("Set-Cookie", res.headers["Set-Cookie"])
          end

          if res.headers["Authorization"] then
              kong.service.request.add_header("Authorization", res.headers["Authorization"])
          end

          if res.headers["Proxy-Authorization"] then
              kong.service.request.add_header("Proxy-Authorization", res.headers["Proxy-Authorization"])
          end

          for key, value in pairs(res.headers) do
              if string.match(key, "^Remote-") then
                  kong.service.request.add_header(key, value)
              elseif string.match(key, "^Authelia-") then
                  kong.service.request.add_header(key, value)
              end
          end
      end

      forward_to_authelia()
